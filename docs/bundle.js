(()=>{"use strict";var e=function(){function e(e){this.points=e}return e.prototype.gainPoint=function(){this.points++},e.prototype.winGame=function(e,t){e.interval.pause(),t.canMove=!1,e.displayWin(this.points)},e}(),t=function(){function e(){this.interval=this.startTimer(0)}return e.prototype.createHTMLBoard=function(e){for(var t=document.querySelector("#board"),n='<div class="grid-container">',a=0;a<9;a++)for(var o=0;o<9;o++){var r=o-1+7*(a-1);if(0!=a&&0!=o&&8!=a&&8!=o||(r=-1),-1!=r){n+='<div class="tile-grid tilerow'+a+" tilecol"+o+" tile"+r+' shadow-sm rounded">';for(var i=0;i<3;i++)for(var s=0;s<3;s++){var l=s+3*i;0!=a&&0!=o&&8!=a&&8!=o||(l=-1),n+='<div class="grid-item grow'+(3*(a-1)+i)+" gcol"+(3*(o-1)+s)+" tile"+r+" cell"+l+'"><span></span></div>'}n+="</div>"}else if(n+='<div class="outTile tilerow'+a+" rounded tilecol"+o,0==a&&(2==o||4==o||6==o)||8==a&&(2==o||4==o||6==o)||0==o&&(2==a||4==a||6==a)||8==o&&(2==a||4==a||6==a))n+=' push-tiles"><span class="btn btn-light shadow-sm"></span></div>';else{var c=0,u=0;0==a?(c=3*o-2,u=-1):8==a?(c=3*o-2,u=21):0==o?(c=-1,u=3*a-2):8==o&&(c=21,u=3*a-2),n+=" grow"+u+" gcol"+c+'"><span></span></div>'}}n+="</div>",t.innerHTML=n},e.prototype.placeTiles=function(e){e.boardRows.forEach((function(e,t){e.tiles.forEach((function(e,n){e.cells.forEach((function(e,a){e.isWalkable&&document.querySelector(".tile"+(n+7*t)+".cell"+a).classList.add("walkable"),e.hasConcept&&document.querySelector(".tile"+(n+7*t)+".cell"+a).classList.add("hasConcept")}))}))}))},e.prototype.placePawn=function(e){document.querySelector(".grow"+e[0]+".gcol"+e[1]).classList.add("occupied")},e.prototype.removePawn=function(e){document.querySelector(".grow"+e[0]+".gcol"+e[1]).classList.remove("occupied")},e.prototype.getDivClassesByCoords=function(e,t){return document.querySelector(".grow"+e+".gcol"+t).classList.value.split(" ")},e.prototype.getParentCellDiv=function(e,t){return document.querySelector(".grow"+e+".gcol"+t).parentElement},e.prototype.changeTileOccupied=function(e,t){e.classList.remove("tile-occupied"),t.classList.add("tile-occupied")},e.prototype.placeExtraTile=function(e){for(var t=document.querySelector("#extraTile"),n='<div class="tile-grid extra-tile shadow-sm rounded">',a=0;a<3;a++)for(var o=0;o<3;o++)n+='<div class="grid-item extra-tile cell'+(o+3*a)+'"><span></span></div>';n+="</div>",t.innerHTML=n,e.cells.forEach((function(e,t){e.isWalkable&&document.querySelector(".extra-tile.cell"+t).classList.add("walkable")}))},e.prototype.lineContainsPawn=function(e){var t=!1;return document.querySelectorAll("."+e).forEach((function(e){e.classList.contains("tile-occupied")&&(t=!0)})),t},e.prototype.refreshLine=function(e,t,n){var a=document.getElementById("pushtiles-track");a.pause(),a.currentTime=0,a.play(),e.includes("col")?n.boardRows.forEach((function(e,n){e.tiles[t].cells.forEach((function(e,a){document.querySelector(".tile"+(t+7*n)+".cell"+a).classList.remove("walkable"),e.isWalkable&&document.querySelector(".tile"+(t+7*n)+".cell"+a).classList.add("walkable")}))})):n.boardRows[t].tiles.forEach((function(e,n){e.cells.forEach((function(e,a){document.querySelector(".tile"+(n+7*t)+".cell"+a).classList.remove("walkable"),e.isWalkable&&document.querySelector(".tile"+(n+7*t)+".cell"+a).classList.add("walkable")}))}))},e.prototype.placeGoal=function(e){document.querySelector("."+e.col+"."+e.row+".outTile").classList.add("goal"),document.querySelector("."+e.tile+"."+e.cell+".grid-item").classList.add("walkable")},e.prototype.setPoints=function(e){document.querySelector("#point-tracker").innerHTML="<strong>Trees:</strong> "+e},e.prototype.startTimer=function(e){var t,n,a,o=1e3*e;return(a={}).resume=function(){t=(new Date).getTime(),n=setInterval(a.step,250)},a.pause=function(){o=a.step(),clearInterval(n)},a.step=function(){var e=Math.max(0,o+((new Date).getTime()-t)),r=Math.floor(e/6e4),i=Math.floor(e/1e3)%60,s=(i<10?"0":"")+i;return document.querySelector("#time-tracker").innerHTML="<strong>Time:</strong> "+r+":"+s,0==e&&(clearInterval(n),a.resume=function(){}),e},a.resume(),a},e.prototype.exploreConcept=function(e,t,n){var a=document.getElementById("reward");a.pause(),a.currentTime=0,a.play(),document.querySelector(".grow"+e+".gcol"+t).classList.remove("hasConcept"),document.querySelector(".grow"+e+".gcol"+t).classList.add("conceptExplored"),this.displayConcept(n)},e.prototype.displayWin=function(e){var t=document.getElementById("main-track");t.pause(),t.currentTime=0;var n=document.getElementById("win-track");if(n.pause(),n.currentTime=0,n.play(),e<12)document.querySelector("#win-modal-message").innerHTML="You have won the game! Well done! Can you plant more trees before leaving the maze the next time you play?";else{var a=this.interval.step(),o=Math.floor(a/1e3/60),r=Math.floor(a/1e3)-60*o;document.querySelector("#win-modal-message").innerHTML="You have won the game and planted all the trees in "+o+"m and "+r+"s! Can you improve your time?"}this.displayModal("win-modal")},e.prototype.movePawn=function(e,t){var n=document.getElementById("move");n.pause(),n.currentTime=0,n.play(),this.removePawn(e),this.placePawn(t)},e.prototype.displayConcept=function(e){this.interval.pause(),e&&(document.querySelector("#concept-modal-title").innerHTML=e.concept,document.querySelector("#concept-modal-message").innerHTML=e.description,document.querySelector("#concept-modal-gamecase").innerHTML=e.gameCase,document.querySelector("#concept-modal-image").innerHTML=e.image),this.displayModal("concept-modal")},e.prototype.closeDialog=function(e){var t=document.getElementById("close-track");t.pause(),t.currentTime=0,t.play();var n=document.querySelector("#"+e);n.classList.remove("show"),n.style.display="none"},e.prototype.rotateSound=function(){var e=document.getElementById("rotate-track");e.pause(),e.currentTime=0,e.play()},e.prototype.displayModal=function(e){var t=document.querySelector("#"+e);t.classList.add("show"),t.style.display="block"},e.prototype.setAvatar=function(e){var t=document.querySelector(":root");switch(e){case"avatar-lion":t.style.setProperty("--avatar-path","url(./static/avatars/lion.png");break;case"avatar-cat":t.style.setProperty("--avatar-path","url(./static/avatars/cat.png");break;case"avatar-dog":t.style.setProperty("--avatar-path","url(./static/avatars/dog.png");break;case"avatar-bear":t.style.setProperty("--avatar-path","url(./static/avatars/bear.png");break;case"avatar-deer":t.style.setProperty("--avatar-path","url(./static/avatars/deer.png");break;case"avatar-chicken":t.style.setProperty("--avatar-path","url(./static/avatars/chicken.png");break;case"avatar-giraffe":t.style.setProperty("--avatar-path","url(./static/avatars/giraffe.png");break;case"avatar-koala":t.style.setProperty("--avatar-path","url(./static/avatars/koala.png");break;case"avatar-panda":t.style.setProperty("--avatar-path","url(./static/avatars/panda.png");break;case"avatar-puffer-fish":t.style.setProperty("--avatar-path","url(./static/avatars/puffer-fish.png");break;case"avatar-rabbit":t.style.setProperty("--avatar-path","url(./static/avatars/rabbit.png");break;case"avatar-sea-lion":t.style.setProperty("--avatar-path","url(./static/avatars/sea-lion.png");break;default:t.style.setProperty("--avatar-path","url(./static/pawn.png")}},e}(),n=function(e){this.tiles=e},a=function(){function e(e,t,n,a,o){void 0===n&&(n=""),void 0===a&&(a=""),void 0===o&&(o=!1),this.isWalkable=e,this.hasConcept=t,this.concept=n,this.conceptDes=a,this.conceptExplored=o}return e.prototype.exploreConcept=function(){return 1},e}(),o=function(){function e(e){this.cells=e}return e.prototype.rotate=function(e,t){for(var n=0;n<t;n++)switch(e){case"r":this.cells=[this.cells[6],this.cells[3],this.cells[0],this.cells[7],this.cells[4],this.cells[1],this.cells[8],this.cells[5],this.cells[2]];break;case"l":this.cells=[this.cells[2],this.cells[5],this.cells[8],this.cells[1],this.cells[4],this.cells[7],this.cells[0],this.cells[3],this.cells[6]]}return 1},e}(),r=function(){function e(e){this.boardRows=e}return e.prototype.pushLine=function(e,t,n,a,r){var i,s=this.cloneBoard(r);switch(e){case"v":switch(t){case"d":s.boardRows[0].tiles[n]=a,r.boardRows.forEach((function(e,t){t<r.boardRows.length-1?s.boardRows[t+1].tiles[n]=e.tiles[n]:i=new o(e.tiles[n].cells)}));break;case"u":s.boardRows[6].tiles[n]=a,r.boardRows.forEach((function(e,t){t>0?s.boardRows[t-1].tiles[n]=e.tiles[n]:i=new o(e.tiles[n].cells)}))}break;case"h":switch(t){case"r":s.boardRows[n].tiles[0]=a,r.boardRows[n].tiles.forEach((function(e,t){t<r.boardRows[n].tiles.length-1?s.boardRows[n].tiles[t+1]=e:i=new o(e.cells)}));break;case"l":s.boardRows[n].tiles[6]=a,r.boardRows[n].tiles.forEach((function(e,t){t>0?s.boardRows[n].tiles[t-1]=e:i=new o(e.cells)}))}}return[s,i]},e.prototype.cloneBoard=function(t){var r=[];return t.boardRows.forEach((function(e){var t=[];e.tiles.forEach((function(e){var n=[];e.cells.forEach((function(e){var t=new a(e.isWalkable,e.hasConcept,e.concept,e.conceptDes,e.conceptExplored);n.push(t)}));var r=new o(n);t.push(r)}));var i=new n(t);r.push(i)})),new e(r)},e}(),i=[new o([new a(!1,!1),new a(!1,!1),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!0,!0),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!0,!0),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!0,!1),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!0,!1),new a(!1,!1),new a(!1,!1),new a(!0,!0),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!0,!1),new a(!1,!1),new a(!1,!1),new a(!0,!0),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!0,!0),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!0,!0),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!0,!1),new a(!1,!1),new a(!1,!1),new a(!0,!0),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!0,!0),new a(!0,!1),new a(!1,!1),new a(!1,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!0,!0),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!0,!0),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!0,!1),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!0,!1),new a(!1,!1),new a(!1,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!0,!0),new a(!0,!1),new a(!1,!1),new a(!1,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!0,!0),new a(!0,!1),new a(!1,!1),new a(!1,!1),new a(!1,!1)]),new o([new a(!1,!1),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!0,!1),new a(!1,!1),new a(!1,!1),new a(!1,!1),new a(!1,!1)])],s=[{row:"tilerow0",col:"tilecol3",tile:"tile2",cell:"cell1"},{row:"tilerow0",col:"tilecol5",tile:"tile4",cell:"cell1"},{row:"tilecol0",col:"tilerow3",tile:"tile14",cell:"cell3"},{row:"tilecol0",col:"tilerow5",tile:"tile28",cell:"cell3"},{row:"tilecol8",col:"tilerow3",tile:"tile20",cell:"cell5"},{row:"tilecol8",col:"tilerow5",tile:"tile34",cell:"cell5"},{row:"tilerow8",col:"tilecol3",tile:"tile44",cell:"cell7"},{row:"tilerow8",col:"tilecol5",tile:"tile46",cell:"cell7"}],l=[{concept:"Reduce",description:"Reducing is simply creating less waste. It’s the best method for keeping the environment clean, so it’s the first of the 3 Rs. By reducing, you stop the problem at the source.",gameCase:"The tiles for this maze have been generated once and they will be used each time anyone plays this game.",image:'<img src="./static/reduce.jpg">'},{concept:"Reuse",description:"Reuse items as much as you can before replacing them. Reusing is taking old or unwanted items you might otherwise throw away and finding a new use for them.",gameCase:"Each time you play this game, the same set of tiles will be reused just in a different place and order.",image:'<img src="./static/reuse.jpg">'},{concept:"Recycle",description:"Recycling is the last — and most commonly used — of the 3 Rs. Recycling is changing discarded materials into new products in order to avoid using more virgin resources.",gameCase:"",image:'<img src="./static/recycle.jpg">'}],c=[{concept:"Disposable products",description:"Disposable products are products that are ment to be discarded as waste after a single or a few uses. It is better to avoid the consumption of this kind of products when possible.",gameCase:"The tiles genereted for this maze are not disposable, as the same tiles will be used each time you or anyone plays the game.",image:'<img src="./static/disposable.jpg">'},{concept:"Landfill",description:"Landfill is a site for the disposal of waste materials.",gameCase:"",image:'<img src="./static/landfill.jpg">'},{concept:"Regenerate",description:"Regenerative sustainability actively seeks to restore and revitalize natural systems. For example, to reforest, to reduce the amount of greenhouse gases on the athmosphere, to reintroduce species to their home environments.",gameCase:"In this game, you are encouraged to go through all small plants and help them grow into mature trees, which absorb greenhouse gases.",image:'<img src="./static/regenerate.jpg">'},{concept:"Recover",description:"The act of putting waste products to use. For example, decomposing garbage produces methane gas, which can be recovered and burnt to produce energy.",gameCase:"",image:'<img src="./static/recover.jpg">'},{concept:"Composting",description:"Composting is nature’s way of recycling. It is one of the most powerful actions we can take to reduce our trash. By turning our food scraps and yard trim into compost, we can transform our waste streams into rich soil for plants to grow.",gameCase:"",image:'<img src="./static/composting.jpg">'},{concept:"Waste",description:"Waste is a product or substance which is no longer suited for its intended use. Any product that we don't reuse or recycle that we discard, is waste. It is what we aim to reduce. When some kinds of waste rots methane is produced. Methane is a greenhouse gas that contributes to global warming.",gameCase:"",image:'<img src="./static/waste.jpg">'},{concept:"Global warming",description:"Global warming is the current rise in temperature of the air and oceans. Global warming is a significant and rapidly accelerating issue caused by human activities, such as greenhouse gas emissions, deforestation, and the burning of fossil fuels.",gameCase:"",image:'<img src="./static/globalwarming.jpg">'},{concept:"Greenhouse gases",description:"Greenhouse gases are gases that absorb and emit infrared radiation and heat the Earth. They are required to keep the Earth warmth, but on a high level of presence in the athmosphere they can increase global warming.",gameCase:"In this game, you are encouraged to go through all small plants and help them grow into mature trees, which absorb greenhouse gases.",image:'<img src="./static/greenhouse.jpg">'},{concept:"Sustainability",description:"Sustainability means meeting our own needs without compromising the ability of future generations to meet their own needs.",gameCase:"",image:'<img src="./static/sustainability.jpg">'},{concept:"Pollution",description:"Pollution is the introduction of contaminants into the natural environment that cause adverse change.",gameCase:"",image:'<img src="./static/pollution.jpg">'}],u=function(){function e(){this.mainConcepts=l.slice(),this.secondaryConcepts=c.slice()}return e.prototype.getConcept=function(){return this.mainConcepts.length>0?this.getMainConcept():this.secondaryConcepts.length>0?this.getSecondaryConcept():void 0},e.prototype.getMainConcept=function(){var e=Math.floor(Math.random()*this.mainConcepts.length),t=this.mainConcepts[e];return this.mainConcepts.splice(e,1),t},e.prototype.getSecondaryConcept=function(){var e=Math.floor(Math.random()*this.secondaryConcepts.length),t=this.secondaryConcepts[e];return this.secondaryConcepts.splice(e,1),t},e}(),d=function(){function e(){this.randomTiles=this.createMoveableTiles()}return e.prototype.createBoard=function(){var e=[],t=this.takeNTiles(3);return e.push(new n([i[0],t[0],i[1],t[1],i[2],t[2],i[3]])),e.push(new n(this.takeNTiles(7))),t=this.takeNTiles(3),e.push(new n([i[4],t[0],i[5],t[1],i[6],t[2],i[7]])),e.push(new n(this.takeNTiles(7))),t=this.takeNTiles(3),e.push(new n([i[8],t[0],i[9],t[1],i[10],t[2],i[11]])),e.push(new n(this.takeNTiles(7))),t=this.takeNTiles(3),e.push(new n([i[12],t[0],i[13],t[1],i[14],t[2],i[15]])),new r(e)},e.prototype.setStartingPosition=function(e){switch(Math.floor(4*Math.random())){case 0:default:return[1,1];case 1:return[19,1];case 2:return[1,19];case 3:return[19,19]}},e.prototype.createMoveableTiles=function(){for(var e=[],t=[new a(!1,!1),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!0,!1),new a(!0,!1),new a(!1,!1),new a(!1,!1),new a(!1,!1)],n=0;n<12;n++){var r=t.slice(),i=new o(r);e.push(i)}var s=[new a(!1,!1),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!0,!1),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)];for(n=0;n<6;n++){r=s.slice();var l=new o(r);e.push(l)}var c=[new a(!1,!1),new a(!1,!1),new a(!1,!1),new a(!1,!1),new a(!0,!1),new a(!0,!1),new a(!1,!1),new a(!0,!1),new a(!1,!1)];for(n=0;n<16;n++){r=c.slice();var u=new o(r);e.push(u)}return e},e.prototype.takeNTiles=function(e){for(var t=[],n=0;n<e;n++){var a=Math.floor(Math.random()*this.randomTiles.length),o=this.randomTiles[a],r=Math.floor(4*Math.random());o.rotate("r",r),t.push(o),this.randomTiles.splice(a,1)}return t},e.prototype.getExtraTile=function(){return this.randomTiles[0]},e.prototype.setGoal=function(){var e=Math.floor(Math.random()*s.length);return s[e]},e.prototype.setConcepts=function(){return new u},e.prototype.playAudio=function(){var e=document.getElementById("main-track");e.pause(),e.currentTime=0,e.volume=.5,e.play()},e}(),p=function(){function e(e,t){this.pawnX=e[0],this.pawnY=e[1],this.canMove=!1,t.getParentCellDiv(this.pawnX,this.pawnY).classList.add("tile-occupied")}return e.prototype.movePawn=function(e,t,n){if(!this.canMove)return-1;var a=void 0,o=void 0;switch(e){case"up":a=this.pawnX-1,o=this.pawnY;break;case"down":a=this.pawnX+1,o=this.pawnY;break;case"right":a=this.pawnX,o=this.pawnY+1;break;case"left":a=this.pawnX,o=this.pawnY-1;break;default:return-1}if(!t.getDivClassesByCoords(a,o).includes("goal")){if(t.getDivClassesByCoords(a,o).includes("walkable")){var r=t.getParentCellDiv(this.pawnX,this.pawnY),i=t.getParentCellDiv(a,o);return this.pawnX=a,this.pawnY=o,r.classList!=i.classList&&t.changeTileOccupied(r,i),1}return-1}n.winGame(t,this)},e.prototype.getPawnCoords=function(){return[this.pawnX,this.pawnY]},e}(),w={tilerow0:{verticality:"v",direction:"d",lines:[{number:1,lineName:"tilecol2"},{number:3,lineName:"tilecol4"},{number:5,lineName:"tilecol6"}],opposedLine:"tilerow8"},tilerow8:{verticality:"v",direction:"u",lines:[{number:1,lineName:"tilecol2"},{number:3,lineName:"tilecol4"},{number:5,lineName:"tilecol6"}],opposedLine:"tilerow0"},tilecol0:{verticality:"h",direction:"r",lines:[{number:1,lineName:"tilerow2"},{number:3,lineName:"tilerow4"},{number:5,lineName:"tilerow6"}],opposedLine:"tilecol8"},tilecol8:{verticality:"h",direction:"l",lines:[{number:1,lineName:"tilerow2"},{number:3,lineName:"tilerow4"},{number:5,lineName:"tilerow6"}],opposedLine:"tilecol0"}},m=["tilerow0","tilerow8","tilecol0","tilecol8"];window.addEventListener("DOMContentLoaded",(function(){!function n(a){var o=document.querySelector("#main-container").innerHTML,r=new d,i=r.createBoard(),s=r.setConcepts(),l=new e(0),c=new t;c.createHTMLBoard(i),c.placeTiles(i);var u=r.getExtraTile();c.placeExtraTile(u),c.placeGoal(r.setGoal()),c.setPoints(l.points);var h=r.setStartingPosition(i),g=new p(h,c);function v(e){var t=e.target.id,n=-1,a=g.getPawnCoords();switch(t){case"arrow-up":n=g.movePawn("up",c,l);break;case"arrow-down":n=g.movePawn("down",c,l);break;case"arrow-left":n=g.movePawn("left",c,l);break;case"arrow-right":n=g.movePawn("right",c,l)}1==n&&y(a,g.getPawnCoords())}function y(e,t){c.movePawn(e,t),c.getDivClassesByCoords(t[0],t[1]).includes("hasConcept")&&(l.gainPoint(),c.setPoints(l.points),g.canMove=!1,c.exploreConcept(t[0],t[1],s.getConcept()))}function f(e){if(g.canMove){var t=e.srcElement.classList;m.forEach((function(e){if(t.contains(e)){var n=w[e];n.lines.forEach((function(e){var a;t.contains(e.lineName)&&(c.lineContainsPawn(e.lineName)||(a=i.pushLine(n.verticality,n.direction,e.number,u,i),i=a[0],u=a[1],c.refreshLine(e.lineName,e.number,i),c.placeExtraTile(u)))}))}}))}}function b(e){var t="concept-modal";switch(e.target.id){case"close-concept-modal":t="concept-modal";break;case"close-tutorial-modal":t="tutorial-modal";break;case"avatar-modal":t="avatar-modal"}c.interval.resume(),c.closeDialog(t),g.canMove=!0}function k(){c.interval.pause(),document.querySelector("#main-container").innerHTML=o,n(!1),r.playAudio()}function C(e){var t=e.srcElement.id;c.setAvatar(t),c.closeDialog("avatar-modal"),c.interval.resume(),g.canMove=!0}c.placePawn(h),g.canMove=!0,document.onkeydown=function(e){var t=-1,n=g.getPawnCoords();"38"==(e=e||window.event).keyCode?t=g.movePawn("up",c,l):"40"==e.keyCode?t=g.movePawn("down",c,l):"37"==e.keyCode?t=g.movePawn("left",c,l):"39"==e.keyCode&&(t=g.movePawn("right",c,l)),1==t&&y(n,g.getPawnCoords())},document.querySelectorAll(".arrow-key").forEach((function(e){e.addEventListener("click",v)})),document.querySelector("#turn-extra-tile-right").addEventListener("click",(function(){u.rotate("r",1),c.placeExtraTile(u),c.rotateSound()})),document.querySelectorAll(".push-tiles").forEach((function(e){e.addEventListener("click",f)})),document.querySelector("#close-concept-modal").addEventListener("click",b),document.querySelector("#btn-play-again").addEventListener("click",k),document.querySelector(".restart").addEventListener("click",k),document.querySelector("#credits").addEventListener("click",(function(){c.closeDialog("win-modal"),c.displayModal("credits-modal")})),document.querySelector("#credits-back").addEventListener("click",(function(){c.closeDialog("credits-modal"),c.displayModal("win-modal")})),document.querySelector(".topbuttons.tutorial").addEventListener("click",(function(){c.interval.pause(),g.canMove=!1,c.displayModal("tutorial-modal")})),document.querySelector("#push-tiles-button").addEventListener("click",(function(){c.closeDialog("tutorial-modal"),c.displayModal("push-tiles-modal")})),document.querySelector("#close-push-tiles-modal").addEventListener("click",(function(){c.closeDialog("push-tiles-modal"),c.displayModal("tutorial-modal")})),document.querySelector("#close-tutorial-modal").addEventListener("click",b),a&&(c.interval.pause(),g.canMove=!1,c.displayModal("welcome-modal")),document.querySelector("#btn-start").addEventListener("click",(function(){r.playAudio(),c.closeDialog("welcome-modal"),c.displayModal("avatar-modal")})),document.querySelectorAll(".avatar-icon").forEach((function(e){e.addEventListener("click",C)}))}(!0)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,